@startuml

!include ../uml/hawaii-async-task-ini.uml

activate svc
  svc -> future : get()
deactivate svc

activate future
  future -> callable : get()
  activate callable

activate thread #ece
  thread -> guarded : run
  activate guarded #ece
    guarded -> thread_local : register( sharedTaskContext )
    activate thread_local #ece

    guarded -> callable : run
    activate callable #ece
      callable -> repo : getUser()

      activate repo #ece
        |||
        create abort
        repo -> abort : new
        repo -> shared : registerAbortStrategy( ... )
        activate shared #ece
        deactivate shared
        |||
        create future_2
        repo -> future_2 : new
        repo -> future_2 : completedFuture( User )
        activate future_2 #ece
        deactivate future_2
        repo -->> callable : CompletableFuture<User>
      deactivate repo
      callable -> future_2 : get( )
      activate future_2 #ece
        future_2 -->> callable : User
      deactivate future_2
      destroy future_2
      callable -> callable : set( User )
      callable -[#ccc]->> guarded
    deactivate callable

    guarded -> shared : finish()
    activate shared #ece
      shared -> guard_executor : remove( TimeoutGuardTask )
      activate guard_executor #ece
        |||
        guard_executor ->> guard
        destroy guard
      deactivate guard_executor
    deactivate shared
    guarded -> thread_local : remove()
    deactivate thread_local
    guarded -[#ccc]->> thread
  deactivate guarded
deactivate thread

    callable -->> future : User
  deactivate callable

  future -->> svc : User
deactivate future
@enduml
