@startuml

!include ../uml/hawaii-async-task-ini.uml

activate svc
  svc -> future : get()
deactivate svc

activate future
  future -> callable : get()
  activate callable

activate thread #ece
  thread -> guarded : run
  activate guarded #ece
    guarded -> thread_local : register( sharedTaskContext )
    activate thread_local #ece

    guarded -> callable : run
    activate callable #ece
      callable -> repo : getUser()

      activate repo #ece
        |||
        repo -> thread_local : sharedContext = get( )
        create abort
        repo -> abort : new( ... )
        repo -> shared : registerAbortStrategy( abortStrategy )
        activate shared #ece
        deactivate shared
        |||
        ... **This takes a while** ...

        guard_executor -[#99f]> guard_thread : timeout
        activate guard_thread #99f
          guard_thread -> thread_local : register( sharedTaskContext )
          activate thread_local #99f

          guard_thread -> shared : removeTask( )
          activate shared #99f
            shared -> executor : remove( AbortableTaskRunnable )
            activate executor #99f
              note left
                Since the ""AbortableTaskRunnable""
                is already running, this does nothing.
              end note
            deactivate executor
            shared -[#ccc]->> guard_thread
          deactivate shared

          guard_thread -> shared : abortTask( )

          activate shared #99f
            shared -> abort : invoke( )
            activate abort #99f
              abort -> repo : force_stop_working( )

              abort -[#ccc]->> shared
            deactivate abort
            shared -> shared : setAborted( )

            shared -[#ccc]->> guard_thread
          deactivate shared
          guard_thread -> thread_local : remove( )
          deactivate thread_local
        deactivate guard_thread
        repo -[#f00]>> callable : **<font color="#ff0000">\tException</font>**
      deactivate repo
      callable -[#f00]>> callable : **<font color="#ff0000">\tException</font>**
    deactivate callable

    guarded -> shared : finish()
    activate shared #ece
      note right
        Since the task is aborted the ""TimeoutGuardTask"" is not removed.
      end note
    deactivate shared
    guarded -> thread_local : remove()
    deactivate thread_local
    guarded -[#ccc]->> thread
  deactivate guarded
deactivate thread

    callable -[#f00]>> future : **<font color="#ff0000">\tException</font>**
  deactivate callable

  future -[#f00]>> svc : **<font color="#ff0000">\tException</font>**
deactivate future
@enduml
