@startuml

participant svc as "Service" #fff
participant future as "CompletableFuture" #eee
participant repo as "Repository" #fff
participant future_2 as "CompletableFuture" #eee
participant abort as "AbortStrategy" #99ccff
participant proxy as "Proxy" #94b57e
participant delegating_exec as "DelegatingExecutor" #99ccff
participant executor as "ThreadPoolTaskExecutor" #94b57e
participant callable as "Callable" #94b57e

participant decorator as "AbortableTaskDecorator" #99ccff
participant guarded as "AbortableTaskRunnable" #99ccff
participant shared as "SharedTaskContext" #99ccff
participant guard as "TimeoutGuardTask" #99ccff
participant guard_executor as "GuardTaskExecutor" #99ccff
participant thread_local as "SharedTaskContextHolder" #99ccff

control thread as "thread-<n>" #ece

control guard_thread as "guard-<n>" #eee

activate svc
  svc -> proxy : getUser()
deactivate svc
note right
  The ""Repository#getUser()"" method is annotation with the ""@Async"" annotation. The annotation may contain the Spring bean name of a ""ThreadPoolExecutor"".
  This allows looking up specific executors for specific tasks.

  Each task **must** be configured in order create a ""DelegatingExecutor"" for it. The executor is registered under the configured task's name.

  In this sequence the ""DelegatingExecutor"" is registered under the name ""repo.get_user""
end note
|||
activate proxy

  proxy -> proxy : findExecutor( '""repo.get_user""' )
  |||

  create callable
  proxy -> callable : new
  proxy -> delegating_exec : execute( callable )

  activate delegating_exec
    create shared
    delegating_exec -> shared : new( )

    delegating_exec -> thread_local : register( sharedTaskContext )
    activate thread_local

    delegating_exec -> executor : execute( callable )
    activate executor
      executor -> decorator : decorate( callable )
      activate decorator
        decorator -> thread_local : sharedTaskContext = get( )
        |||

        create guard
        decorator -> guard : new( sharedTaskContext )
        decorator -> guard_executor : schedule( guard, sharedTaskContext.getTimeout( ) )
        activate guard_executor
          create guard_thread
          guard_executor -[#ccc]-> guard_thread : new
        deactivate guard_executor
        decorator -> shared : registerRemoveTimeoutGuardStrategy( guard )
        activate shared
        deactivate shared
        |||
        |||
        create guarded
        decorator -> guarded : new( runnable, sharedTaskContext )

        |||
        decorator -> shared : registerRemovalStrategy( guarded )
        activate shared
        deactivate shared
        |||

        decorator -->> executor : abortableTaskRunnable

        '# Finally
        decorator -> thread_local : remove()
        deactivate thread_local
      deactivate decorator

      executor -> executor : enqueue( abortableTaskRunnable )
      activate executor
        '#
        '# Create the return
        '#
        create future
        executor -> future : new
      deactivate executor

      create thread
      executor -[#ccc]-> thread : new


      executor -->> delegating_exec : CompletableFuture<User>
    deactivate executor
    delegating_exec -->> proxy : CompletableFuture<User>
  deactivate delegating_exec
  proxy -->> svc : CompletableFuture<User>
deactivate proxy

@enduml
